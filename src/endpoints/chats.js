import {endpoint, open} from "../lib/api-helper";
import {mongo, id as monkid} from "../lib/db";
import {endpoints} from "../lib/endpoints";

import os from "os";
import {getTaskCompleteTime, leadName, randomColor} from "../helper.js";
import dayjs from "dayjs";

const db = mongo.get("chats");

const genMessage = fields => {
    return Object.keys(fields)
        .filter(k => fields[k] != null)
        .map(field => `[${field}]: ${fields[field]}`)
        .join(os.EOL);
};

const messagesToText = (messages, agents = []) => {
    return messages
        .map(message => {
            const agent = agents.find(agent => +message.agent_id === +agent.id);
            const manager = agent == null ? "Менеджер" : agent.name;
            const author = message.type === "visitor" ? "Клиент" : manager;
            return `[${author}]: ${message.message}`;
        })
        .join(os.EOL);
};

const hook = async data => {
    const {event_name, visitor, chat, session, page, message, agents} = data;
    if (event_name !== "offline_message" && event_name !== "chat_finished") {
        return {result: "Event currently not supported"};
    }
    console.log("[jivosite hook]", "added to database");
    db.insert(data);
    //if we already have this contact then just add note
    if (visitor.email != null && (await endpoints.leads.db.count({email: visitor.email})) > 0) {
        console.log("[jivosite hook]", visitor.email, "already exists");
        // add note with messages
        const lead = await endpoints.leads.getLeadByEmail({email: visitor.email});
        if (lead != null && chat != null && chat.messages != null) {
            if (lead.status_id === 143) {
                endpoints.leads.change({lead: lead._id, key: "status_id", value: 20674270});
            }
            if (lead.doNotDisturbTill !== null && dayjs(lead.doNotDisturbTill).isAfter(dayjs())) {
                endpoints.tasks.add({
                    lead: lead._id,
                    complete_till: getTaskCompleteTime("high"),
                    text: "Повторная заявка через JivoChat",
                });
            }
            endpoints.notes.add({
                type: "text",
                text: messagesToText(chat.messages, agents ?? []),
                lead: lead._id,
            });
            return {result: "User with such email already exists in the system"};
        } else return {result: "Found contact, but couldn't find a lead"};
    } else if (visitor.description === "!!!") {
        return {result: "Agent marked not to add to the system"};
    } else {
        //add lead to the system
        console.log("[jivosite hook]", visitor.email, "to be added to the system");
        const channel = page && page.url;
        const language =
            page != null && channel != null
                ? channel.includes("world") || channel.includes("ru")
                    ? "ru"
                    : "en"
                : "en";
        if (event_name === "offline_message") {
            console.log("[jivosite hook]", "autoresponse");
            endpoints.emails.autoresponse({
                language,
                name: visitor.name || (language === "ru" ? "Клиент" : "Client"),
                email: visitor.email,
            });
        }
        console.log("[jivosite hook]", "passed autoresponse stage, about to add new lead");
        const lead = await endpoints.leads.add({
            source: "jivosite",
            russianSpeaking: language === "ru",
            autogenerated: true,
            country: session.geoip.country === "Russian Federation" ? "Russia" : session.geoip.country,
            contacts: [
                {
                    _id: monkid(),
                    contact_name: visitor.name,
                    phone: visitor.phone && parseInt(visitor.phone),
                    email: visitor.email,
                    background: randomColor(),
                },
            ],
        });
        console.log("[jivosite hook]", "lead added", lead._id);
        endpoints.notes.add({
            type: "text",
            lead: lead._id,
            text: genMessage({
                Message: message,
                Location: `${session.geoip.country} ${session.geoip.region} ${session.geoip.city}`,
                IP: session.ip_addr,
                From: page && `${page.title} ${page.url}`,
            }),
        });

        if (chat != null && chat.messages != null) {
            endpoints.notes.add({
                type: "text",
                lead: lead._id,
                text: event_name === "offline_message" ? message : messagesToText(chat.messages, agents ?? []),
            });
        }
        const priority = visitor.description !== "!";
        endpoints.tasks.add({
            lead: lead._id,
            complete_till: getTaskCompleteTime(dayjs(), priority ? "high" : "normal"),
            text: priority
                ? "Заявка через JivoChat, нужно срочно связаться с клиентом"
                : "Заявка через Jivosite, нужно связаться с клиентом",
        });
        // change our system
        endpoints.notifications.sendNotification({
            title: "New client from JivoChat",
            description: `${leadName(lead)}`,
            receivers: ["alena"],
            lead: lead._id,
        });
        return {result: "ok"};
    }
};

export const chats = endpoint(
    {
        hook: open(hook),
    },
    {
        db,
        hook,
    },
);
